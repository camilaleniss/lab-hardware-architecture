// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2020 18:43:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU8bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU8bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg ClkRegister;
reg [7:0] InputData;
reg M;
reg [3:0] S;
reg [2:0] SelDestino;
reg [2:0] SelOperandoA;
reg [2:0] SelOperandoB;
reg Type;
// wires                                               
wire [7:0] BusInterno;
wire Cout;
wire NF;
wire [7:0] OperandoA;
wire [7:0] OperandoB;
wire [7:0] OutALU;
wire Ov;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;
wire [7:0] R4;
wire [7:0] R5;
wire ZF;

// assign statements (if any)                          
CPU8bits i1 (
// port map - connection between master ports and signals/registers   
	.BusInterno(BusInterno),
	.Cin(Cin),
	.ClkRegister(ClkRegister),
	.Cout(Cout),
	.InputData(InputData),
	.M(M),
	.NF(NF),
	.OperandoA(OperandoA),
	.OperandoB(OperandoB),
	.OutALU(OutALU),
	.Ov(Ov),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.S(S),
	.SelDestino(SelDestino),
	.SelOperandoA(SelOperandoA),
	.SelOperandoB(SelOperandoB),
	.\Type (Type),
	.ZF(ZF)
);
initial 
begin 
#1000000 $finish;
end 
// InputData[ 7 ]
initial
begin
	InputData[7] = 1'b1;
	InputData[7] = #300000 1'b0;
end 
// InputData[ 6 ]
initial
begin
	InputData[6] = 1'b1;
	InputData[6] = #300000 1'b0;
end 
// InputData[ 5 ]
initial
begin
	InputData[5] = 1'b1;
	InputData[5] = #300000 1'b0;
end 
// InputData[ 4 ]
initial
begin
	InputData[4] = 1'b1;
	InputData[4] = #300000 1'b0;
end 
// InputData[ 3 ]
initial
begin
	InputData[3] = 1'b1;
	InputData[3] = #300000 1'b0;
end 
// InputData[ 2 ]
initial
begin
	InputData[2] = 1'b1;
	InputData[2] = #600000 1'b0;
end 
// InputData[ 1 ]
initial
begin
	InputData[1] = 1'b1;
	InputData[1] = #300000 1'b0;
end 
// InputData[ 0 ]
initial
begin
	InputData[0] = 1'b1;
	InputData[0] = #600000 1'b0;
end 

// Type
initial
begin
	Type = 1'b1;
	Type = #600000 1'b0;
end 
// SelDestino[ 2 ]
initial
begin
	SelDestino[2] = 1'b0;
end 
// SelDestino[ 1 ]
initial
begin
	SelDestino[1] = 1'b1;
	SelDestino[1] = #600000 1'b0;
end 
// SelDestino[ 0 ]
initial
begin
	SelDestino[0] = 1'b0;
	SelDestino[0] = #300000 1'b1;
	SelDestino[0] = #300000 1'b0;
end 

// ClkRegister
initial
begin
	ClkRegister = 1'b0;
	ClkRegister = #100000 1'b1;
	ClkRegister = #100000 1'b0;
	ClkRegister = #200000 1'b1;
	ClkRegister = #100000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

// M
initial
begin
	M = 1'b0;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 
// SelOperandoB[ 2 ]
initial
begin
	SelOperandoB[2] = 1'b0;
end 
// SelOperandoB[ 1 ]
initial
begin
	SelOperandoB[1] = 1'b0;
end 
// SelOperandoB[ 0 ]
initial
begin
	SelOperandoB[0] = 1'b0;
end 
// SelOperandoA[ 2 ]
initial
begin
	SelOperandoA[2] = 1'b0;
end 
// SelOperandoA[ 1 ]
initial
begin
	SelOperandoA[1] = 1'b0;
end 
// SelOperandoA[ 0 ]
initial
begin
	SelOperandoA[0] = 1'b0;
end 
endmodule

